{"version":3,"sources":["useLoader.js","App.js","serviceWorker.js","index.js"],"names":["observables","of","pipe","delay","App","useState","progress","setProgress","progressText","setProgressText","useEffect","loadButton","document","getElementById","array$","from","requests$","concatAll","clicks$","fromEvent","progress$","switchMapTo","share","count$","count","ratio$","scan","current","withLatestFrom","subscribe","progressRatio","progressSubscirption","data","unsubscribe","useLoader","progressPercent","className","id","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4SAoBMA,EAAc,CANDC,YAAG,sBAAsBC,KAAKC,YAAM,MACpCF,YAAG,wBAAwBC,KAAKC,YAAM,MACpCF,YAAG,yBAAyBC,KAAKC,YAAM,OACxCF,YAAG,sBAAsBC,KAAKC,YAAM,OACpCF,YAAG,qBAAqBC,KAAKC,YAAM,Q,MCmBxCC,MAlCf,WAAgB,IAAD,EDyBU,WAAO,IAAD,EACIC,mBAAS,GADb,mBACpBC,EADoB,KACXC,EADW,OAEYF,mBAAS,IAFrB,mBAEpBG,EAFoB,KAEPC,EAFO,KA4BzB,OAzBFC,qBAAU,WACN,IAAMC,EAAaC,SAASC,eAAe,QACrCC,EAASC,YAAKf,GACdgB,EAAYF,EAAOZ,KAAKe,eACxBC,EAAUC,YAAUR,EAAY,SAEhCS,EAAYF,EAAQhB,KAAKmB,YAAYL,GAAYM,eAEjDC,EAAST,EAAOZ,KAAKsB,eAErBC,EAASL,EAAUlB,KACvBwB,aAAK,SAAAC,GAAO,OAAIA,EAAU,IAAG,GAC7BC,YAAeL,GAAQ,SAACI,EAASH,GAAV,OAAoBG,EAAUH,MAMvDN,EAAQhB,KAAKmB,YAAYI,IAASI,WAJX,SAAAC,GACnBvB,EAAYuB,MAKhB,IAAMC,EAAuBX,EAAUS,WAAU,SAACG,GAAD,OAAUvB,EAAgBuB,MAC3E,OAAO,WACHD,EAAqBE,iBAEzB,IACK,CAAC3B,WAASE,gBCpDW0B,GAAzB5B,EADM,EACNA,SAASE,EADH,EACGA,aACV2B,EAA6B,IAAX7B,EAClB8B,EAAS,+BAA2BD,GAC1C,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAW,yBACd,wBAAIA,UAAW,cAAf,+BAEF,yBAAKA,UAAU,oBACb,yBAAKA,UAAS,wBAAmBA,IACR,MAApBD,GAA2B,yBAGlC,yBAAKC,UAAU,cACb,uBAAGA,UAAW,oBAAqBD,EAAnC,OAEF,yBAAKC,UAAU,6BACb,uBAAGA,UAAU,kBACV5B,IAGL,yBAAK4B,UAAU,2BACb,4BAAQA,UAAW,eAAgBC,GAAG,QAAtC,mBAIF,yBAAKD,UAAU,yBACb,wCAAa,uBAAGE,KAAM,4CAAT,mBCnBDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlC,SAASC,eAAe,SD0HpB,kBAAmBkC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.77fdd011.chunk.js","sourcesContent":["import {useEffect,useState} from 'react';\n\nimport { of, fromEvent, from } from 'rxjs';\n\nimport {\n  delay,\n  switchMapTo,\n  concatAll,\n  count,\n  scan,\n  withLatestFrom,\n  share,\n} from 'rxjs/operators';\n\nconst requestOne = of('Hacking Google ...').pipe(delay(500));\nconst requestTwo = of('Hacking Facebook ...').pipe(delay(800));\nconst requestThree = of('Hacking Micorsoft ...').pipe(delay(1100));\nconst requestFour = of('Hacking Github ...').pipe(delay(1400));\nconst requestFive = of('Hacking To Me ...').pipe(delay(1700));\n\nconst observables = [\n  requestOne,\n  requestTwo,\n  requestThree,\n  requestFour,\n  requestFive\n];\n\nexport const useLoader = () => {\n    const [progress,setProgress] = useState(0);\n    const [progressText,setProgressText] = useState('');\n    useEffect(() => {\n        const loadButton = document.getElementById('load');\n        const array$ = from(observables);\n        const requests$ = array$.pipe(concatAll());\n        const clicks$ = fromEvent(loadButton, 'click');\n        \n        const progress$ = clicks$.pipe(switchMapTo(requests$), share());\n        \n        const count$ = array$.pipe(count());\n        \n        const ratio$ = progress$.pipe(\n          scan(current => current + 1, 0),\n          withLatestFrom(count$, (current, count) => current / count)\n        );\n        const updateProgress = progressRatio => {\n            setProgress(progressRatio);\n        };\n        \n        clicks$.pipe(switchMapTo(ratio$)).subscribe(updateProgress);\n        \n        const progressSubscirption = progress$.subscribe((data) => setProgressText(data));\n        return () => {\n            progressSubscirption.unsubscribe();\n        }\n      },[])\n      return {progress,progressText};\n}","import React from 'react';\nimport { useLoader } from './useLoader';\nimport './App.scss';\nfunction App() {\n  const {progress,progressText} = useLoader();\n  const progressPercent = progress * 100;\n  const className = `Progress__Bar__Data__${progressPercent}`;\n  return (\n    <div className=\"App\">\n      <div className={'Bar__Title__Container'}>\n        <h2 className={'Bar__Title'}>RX JS Progress Bar Updated</h2>\n      </div>\n      <div className=\"Progress__Border\">\n        <div className={`Progress__Bar ${className}`}>\n           { progressPercent === 100 && 'Successfully Hacked!'}\n        </div>\n      </div>\n      <div className=\"Percentage\">\n        <p className={'Percentage__Text'}>{progressPercent} %</p>\n      </div>\n      <div className=\"Progress__Text__Container\">\n        <p className=\"Progress__Text\">\n          {progressText}\n        </p>\n      </div>\n      <div className=\"Load__Button__Container\">\n        <button className={'Hack__Button'} id=\"load\">\n          Click To Hack!\n        </button>\n      </div>\n      <div className=\"SocialLink__Container\">\n        <h3>Made By: <a href={'https://facebook.com/developerayarhlaine'}>Ayar Hlaine</a></h3>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}